{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jerem\\\\Desktop\\\\fe3-final\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { response } from \"msw\";\nimport { useContext } from \"react\";\nimport { useEffect, useState, useReducer } from \"react\";\nimport { createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  theme: 'black',\n  element: []\n};\nconst ContextGlobal = /*#__PURE__*/createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ELEMENT':\n      return { ...state,\n        element: action.payload\n      };\n\n    case 'THEME':\n      return { ...state,\n        theme: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  //const [favs, setFavs] = useState([]);\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(res => dispatch({\n      type: 'ELEMENT',\n      payload: res\n    }));\n  }, []);\n\n  const handleThemeChange = () => {\n    const dark = {\n      backgroundNavbar: \"black\",\n      backgroundHome: \"rgb(146, 146, 146)\",\n      color: \"white\"\n    };\n\n    if (state.theme === '') {\n      dispatch({\n        type: 'THEME',\n        payload: dark\n      });\n    } else {\n      dispatch({\n        type: 'THEME',\n        payload: ''\n      });\n    }\n  };\n\n  console.log(state.theme);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      state,\n      handleThemeChange\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = ContextProvider;\nexport const useContextGlobal = () => {\n  _s2();\n\n  return useContext(ContextGlobal);\n};\n\n_s2(useContextGlobal, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["response","useContext","useEffect","useState","useReducer","createContext","initialState","theme","element","ContextGlobal","reducer","state","action","type","payload","ContextProvider","children","dispatch","fetch","then","json","res","handleThemeChange","dark","backgroundNavbar","backgroundHome","color","console","log","useContextGlobal"],"sources":["C:/Users/jerem/Desktop/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import { response } from \"msw\";\r\nimport { useContext } from \"react\";\r\nimport { useEffect , useState , useReducer } from \"react\";\r\nimport { createContext } from \"react\";\r\n\r\n\r\nconst initialState = {theme: 'black', element: []}\r\n\r\nconst ContextGlobal = createContext();\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ELEMENT':\r\n      return { ...state, element: action.payload };\r\n    case 'THEME':\r\n      return { ...state, theme: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\r\n\r\n  //const [favs, setFavs] = useState([]);\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n \r\n  useEffect(()=>{\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => (response.json()))\r\n    .then(res => dispatch({ type: 'ELEMENT', payload: res }) )\r\n\r\n},[])\r\n\r\n\r\n\r\n  const handleThemeChange = () => {\r\n\r\n    const dark= {\r\n      backgroundNavbar:\"black\",\r\n      backgroundHome:\"rgb(146, 146, 146)\",\r\n      color:\"white\"\r\n  }\r\n\r\n      if (state.theme === '') {\r\n        dispatch({ type: 'THEME', payload: dark });\r\n      } else {\r\n        dispatch({ type: 'THEME', payload: '' });\r\n      }\r\n\r\n   };\r\n\r\n   console.log(state.theme)\r\n   \r\n\r\n  return (\r\n    <ContextGlobal.Provider value={{state, handleThemeChange}}>\r\n      {children}\r\n    </ContextGlobal.Provider>\r\n  );\r\n};\r\n\r\nexport const useContextGlobal = () => useContext(ContextGlobal);\r\n\r\n"],"mappings":";;;;AAAA,SAASA,QAAT,QAAyB,KAAzB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,EAAqBC,QAArB,EAAgCC,UAAhC,QAAkD,OAAlD;AACA,SAASC,aAAT,QAA8B,OAA9B;;AAGA,MAAMC,YAAY,GAAG;EAACC,KAAK,EAAE,OAAR;EAAiBC,OAAO,EAAE;AAA1B,CAArB;AAEA,MAAMC,aAAa,gBAAGJ,aAAa,EAAnC;;AAEA,MAAMK,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACjC,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,SAAL;MACE,OAAO,EAAE,GAAGF,KAAL;QAAYH,OAAO,EAAEI,MAAM,CAACE;MAA5B,CAAP;;IACF,KAAK,OAAL;MACE,OAAO,EAAE,GAAGH,KAAL;QAAYJ,KAAK,EAAEK,MAAM,CAACE;MAA1B,CAAP;;IACF;MACE,OAAOH,KAAP;EANJ;AAQD,CATD;;AAWA,OAAO,MAAMI,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EAEA;EACA,MAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBb,UAAU,CAACM,OAAD,EAAUJ,YAAV,CAApC;EAGAJ,SAAS,CAAC,MAAI;IACZgB,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACMnB,QAAQ,IAAKA,QAAQ,CAACoB,IAAT,EADnB,EAECD,IAFD,CAEME,GAAG,IAAIJ,QAAQ,CAAC;MAAEJ,IAAI,EAAE,SAAR;MAAmBC,OAAO,EAAEO;IAA5B,CAAD,CAFrB;EAIH,CALU,EAKT,EALS,CAAT;;EASA,MAAMC,iBAAiB,GAAG,MAAM;IAE9B,MAAMC,IAAI,GAAE;MACVC,gBAAgB,EAAC,OADP;MAEVC,cAAc,EAAC,oBAFL;MAGVC,KAAK,EAAC;IAHI,CAAZ;;IAME,IAAIf,KAAK,CAACJ,KAAN,KAAgB,EAApB,EAAwB;MACtBU,QAAQ,CAAC;QAAEJ,IAAI,EAAE,OAAR;QAAiBC,OAAO,EAAES;MAA1B,CAAD,CAAR;IACD,CAFD,MAEO;MACLN,QAAQ,CAAC;QAAEJ,IAAI,EAAE,OAAR;QAAiBC,OAAO,EAAE;MAA1B,CAAD,CAAR;IACD;EAEH,CAdF;;EAgBCa,OAAO,CAACC,GAAR,CAAYjB,KAAK,CAACJ,KAAlB;EAGD,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAACI,KAAD;MAAQW;IAAR,CAA/B;IAAA,UACGN;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAxCM;;GAAMD,e;;KAAAA,e;AA0Cb,OAAO,MAAMc,gBAAgB,GAAG;EAAA;;EAAA,OAAM5B,UAAU,CAACQ,aAAD,CAAhB;AAAA,CAAzB;;IAAMoB,gB"},"metadata":{},"sourceType":"module"}